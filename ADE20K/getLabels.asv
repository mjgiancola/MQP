% Script to create labels dataset from images in ADE20K dataset

load('index_ade20k.mat');

%outfile = fopen('labels.txt', 'w');

%% Read in image data

% These files don't actually exist;
% loadAde20K will parse them to get the other paths
filename1 = 'Annotator1.jpg';
filename2 = 'Annotator2.jpg';
filename3 = 'Annotator3.jpg';
filename4 = 'Annotator4.jpg';
[Om1, Oi1, Pm1, Pi1, objects1, parts1] = loadAde20K(filename1);
[Om2, Oi2, Pm2, Pi2, objects2, parts2] = loadAde20K(filename2);
[Om3, Oi3, Pm3, Pi3, objects3, parts3] = loadAde20K(filename3);
[Om4, Oi4, Pm4, Pi4, objects4, parts4] = loadAde20K(filename4);
% Om is a matrix where Om(i,j) contains the label of pixel i,j

% For first experiment, take a slice of images
Om1 = Om1(990:1120, 785:990);
Om2 = Om2(990:1120, 785:990);
Om3 = Om3(990:1120, 785:990);
Om4 = Om4(990:1120, 785:990);

%% Generate list of unique label types in all images
labels1 = unique(Om1);
labels2 = unique(Om2);
labels3 = unique(Om3);
labels4 = unique(Om4);
labels = unique([labels1; labels2; labels3; labels4]);

%% Determine missing pixels (ie. pixels that no one labeled)

A = find(Om1==0);
B = find(Om2==0);
C = find(Om3==0);
D = find(Om4==0);
missing = intersect( intersect(A,B), intersect(C,D) );

%% Compute metadata

% Number of nonzero labels (zeros represent unlabeled pixels)
numLabels = nnz(Om1) + nnz(Om2) + nnz(Om3) + nnz(Om4);

numLabelers = 4;

% Number of pixels in the image (all are same)
numImages = numel(Om1);

% Follows notation of our paper
% Number of unique colors in all pictures
numCharacters = size(labels, 1)

return

prior = 1 / numCharacters;

% Gross, I know. Outputs metadata to file
fprintf(outfile, '%d %d %d %d\r\n', numLabels, numLabelers, numImages, numCharacters);
fprintf(outfile, '0 1 2 3 4 5');
fprintf(outfile, '%.3f %.3f %.3f %.3f %.3f %.3f');
%fprintf(outfile, '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\r\n');
%fprintf(outfile, '%.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\r\n', ...
        prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior, prior);

%% Read labels for image 1

labelerIdx = 1;
xdim = size(Om1, 1);
ydim = size(Om2, 2);
    
%for i = 1:xdim
%    for j = 1:ydim
for i = 990:1120
    for j = 785:990
        pixel = Om1(i,j);
        
        % If no one labeled this pixel, we *need* to include the zero label
        % so that it will get a label (zero) from the model
        % If we have a label from the pixel (from >= 1 annotator) then we
        % can drop the zero label
        if pixel==0 && ~ismember(pixel, missing)
            continue 
        end
        % Otherwise, compute label
        imageIdx = (ydim * (i-1)) + j;
        lbl = find(labels==pixel); % Gives a label from 0,..,n for each pixel
        fprintf(outfile, '%d %d %d\r\n', imageIdx, labelerIdx, lbl);
    end
end

%% Read labels from image 2

labelerIdx = 2;
xdim = size(Om1, 1);
ydim = size(Om2, 2);
    
%for i = 1:xdim
%    for j = 1:ydim
for i = 990:1120
    for j = 785:990
        pixel = Om2(i,j);
        
        % If no one labeled this pixel, we *need* to include the zero label
        % so that it will get a label (zero) from the model
        % If we have a label from the pixel (from >= 1 annotator) then we
        % can drop the zero label
        if pixel==0 && ~ismember(pixel, missing)
            continue 
        end
        % Otherwise, compute label
        imageIdx = (ydim * (i-1)) + j;
        lbl = find(labels==pixel); % Gives a label from 0,..,n for each pixel
        fprintf(outfile, '%d %d %d\r\n', imageIdx, labelerIdx, lbl);
    end
end

%% Read labels from image 3

labelerIdx = 3;
xdim = size(Om1, 1);
ydim = size(Om2, 2);
    
%for i = 1:xdim
%    for j = 1:ydim
for i = 990:1120
    for j = 785:990
        pixel = Om2(i,j);
        
        % If no one labeled this pixel, we *need* to include the zero label
        % so that it will get a label (zero) from the model
        % If we have a label from the pixel (from >= 1 annotator) then we
        % can drop the zero label
        if pixel==0 && ~ismember(pixel, missing)
            continue 
        end
        % Otherwise, compute label
        imageIdx = (ydim * (i-1)) + j;
        lbl = find(labels==pixel); % Gives a label from 0,..,n for each pixel
        fprintf(outfile, '%d %d %d\r\n', imageIdx, labelerIdx, lbl);
    end
end

%% Read labels from image 4

labelerIdx = 4;
xdim = size(Om1, 1);
ydim = size(Om2, 2);
    
%for i = 1:xdim
%    for j = 1:ydim
for i = 990:1120
    for j = 785:990
        pixel = Om4(i,j);
        
        % If no one labeled this pixel, we *need* to include the zero label
        % so that it will get a label (zero) from the model
        % If we have a label from the pixel (from >= 1 annotator) then we
        % can drop the zero label
        if pixel==0 && ~ismember(pixel, missing)
            continue
        end
        % Otherwise, compute label
        imageIdx = (ydim * (i-1)) + j;
        lbl = find(labels==pixel); % Gives a label from 0,..,n for each pixel
        fprintf(outfile, '%d %d %d\r\n', imageIdx, labelerIdx, lbl);
    end
end

%% Done !!!
fclose(outfile);